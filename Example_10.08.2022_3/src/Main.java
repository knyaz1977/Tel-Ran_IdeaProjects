public class Main {

    public static void main(String[] args) {
        // Динамическая диспетчеризация методов

        // Принцип: ссылочная переменная из суперкласса может ссылаться на
        // объект подкласса

        A objA = new A(); // Объект класса A (объект суперкласса)
        B objB = new B(); // Объект класса B (объект подкласса)

        A a = new A();
        a.test();
        B b = new B();
        b.test();
        C c = new C();
        c.test();

        System.out.println();

        // По ссылке на разные типы объектов будут вызываться разные варианты переопределенного метода.
        // Иначе говоря вариант переопределенного метода выбирается для выполнения в зависимости от типа объекта,
        // на который делается ссылка, а не типа ссылочной переменной.

        A ref; // Переменная ссылочного типа из базового класса A
        ref = a;
        ref.test();
        ref = b;
        ref.test();
        ref = c;
        ref.test();

//        objA.i = 10;
//        objB.i = 20;
//        objB.j = 30;

//      A superA = objA; // Типичная переменная, типы(A) совпадают
        A superA = objB; // Создали переменную из суперкласса // Демонстрация принципа(который выше указан)
        // Типы разные, но IDEA не ругается, потому, что есть наследование

    }
}
